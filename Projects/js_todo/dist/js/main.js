!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="dist/",r(r.s=9)}({0:function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();window.onload=function(){HTMLElement.prototype.appendChildren=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0;n<t.length;n++)this.appendChild(t[n])};var e={form:document.querySelector(".todo-form"),input:document.querySelector(".todo-form__input"),list:this.document.querySelector(".todo-list"),filter:{all:document.querySelector("#filterAll"),completed:document.querySelector("#filterCompleted"),uncompleted:document.querySelector("#filterUncompleted")}};e.input.addEventListener("blur",function(e){e.target.value?e.target.classList.add("is-active"):e.target.classList.remove("is-active")}),new(function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.form=t.form,this.input=t.input,this.list=t.list,JSON.parse(localStorage.getItem("todos"))||localStorage.setItem("todos",JSON.stringify([])),localStorage.getItem("activeTab")||localStorage.setItem("activeTab","all"),this.todos=JSON.parse(localStorage.getItem("todos")),this.filter=t.filter,this.form.addEventListener("submit",function(e){r.addTodo(e)}),this.filter.all.addEventListener("click",function(){r.filterAll()}),this.filter.completed.addEventListener("click",function(){r.filterCompleted()}),this.filter.uncompleted.addEventListener("click",function(){r.filterUncompleted()}),this.render()}return n(e,[{key:"checkHandler",value:function(e){var t=this.todos.filter(function(t){return t.id===e})[0];t.isChecked=!t.isChecked,this.render()}},{key:"addTodo",value:function(e){e.preventDefault();var t={text:this.input.value,isChecked:!1,isVisible:!0,id:this.todos.length||0};this.todos.push(t),this.input.value="",this.render()}},{key:"removeTodo",value:function(e){this.todos=[].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(this.todos.filter(function(t){return t.id!==e}))),this.render()}},{key:"editTodo",value:function(e,t){var r=!0,n=!1,o=void 0;try{for(var i,l=this.todos[Symbol.iterator]();!(r=(i=l.next()).done);r=!0){var a=i.value;a.id===t&&(a.text=e.target.value)}}catch(e){n=!0,o=e}finally{try{!r&&l.return&&l.return()}finally{if(n)throw o}}this.render()}},{key:"filterAll",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.todos[Symbol.iterator]();!(e=(n=o.next()).done);e=!0)n.value.isVisible=!0}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}localStorage.setItem("activeTab","all"),this.render()}},{key:"filterCompleted",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.todos[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var i=n.value;i.isChecked?i.isVisible=!0:i.isVisible=!1}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}localStorage.setItem("activeTab","completed"),this.render()}},{key:"filterUncompleted",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.todos[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var i=n.value;i.isChecked?i.isVisible=!1:i.isVisible=!0}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}localStorage.setItem("activeTab","uncompleted"),this.render()}},{key:"handleEditClick",value:function(e){document.getElementById(e).disabled=!1}},{key:"switchActiveTab",value:function(){function e(e){for(var t in this.filter)if(this.filter.hasOwnProperty(t)){var r=this.filter[t];e===t?r.classList.add("is-active"):r.classList.remove("is-active")}}switch(localStorage.getItem("activeTab")){case"all":e.call(this,"all");break;case"completed":e.call(this,"completed");break;case"uncompleted":e.call(this,"uncompleted");break;default:e.call(this,"all")}}},{key:"render",value:function(){var e=this;this.list.innerHTML="",this.switchActiveTab();var t=function(t){if(!t.isVisible)return"continue";var r=document.createElement("li");r.classList.add("todo-list__item");var n=document.createElement("input");n.classList.add("todo-list__checkbox"),n.type="checkbox",n.id="deal-"+t.id,n.checked=t.isChecked,console.dir(n),n.addEventListener("change",function(){e.checkHandler(t.id)});var o=document.createElement("input");o.classList.add("todo-list__text"),o.type="text",o.id="text-"+t.id,o.disabled=!0,o.value=t.text,o.addEventListener("blur",function(r){e.editTodo(r,t.id)});var i=document.createElement("label");i.classList.add("todo-list__edit"),i.htmlFor="text-"+t.id,i.innerHTML='<i class="material-icons">edit</i>',i.addEventListener("click",function(r){e.handleEditClick("text-"+t.id)});var l=document.createElement("label");l.classList.add("todo-list__label"),l.htmlFor="deal-"+t.id,l.appendChildren(o,i);var a=document.createElement("button");a.classList.add("todo-list__remove"),a.type="button",a.innerHTML='<i class="material-icons">delete_forever</i>',a.addEventListener("click",function(){e.removeTodo(t.id)}),e.list.appendChildren(r),r.appendChildren(n,l,a)},r=!0,n=!1,o=void 0;try{for(var i,l=this.todos[Symbol.iterator]();!(r=(i=l.next()).done);r=!0)t(i.value)}catch(e){n=!0,o=e}finally{try{!r&&l.return&&l.return()}finally{if(n)throw o}}localStorage.setItem("todos",JSON.stringify(this.todos))}}]),e}())(e)}},1:function(e,t,r){"use strict";function n(e){return function(){return e}}var o=function(){};o.thatReturns=n,o.thatReturnsFalse=n(!1),o.thatReturnsTrue=n(!0),o.thatReturnsNull=n(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},2:function(e,t,r){"use strict";e.exports={}},3:function(e,t,r){"use strict";e.exports=function(e,t,r,n,o,i,l,a){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,n,o,i,l,a],s=0;(u=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},35:function(e,t,r){},4:function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach(function(e){n[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,a=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in r=Object(arguments[u]))o.call(r,c)&&(a[c]=r[c]);if(n){l=n(r);for(var s=0;s<l.length;s++)i.call(r,l[s])&&(a[l[s]]=r[l[s]])}}return a}},5:function(e,t,r){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(4),o=r(3),i=r(2),l=r(1),a="function"==typeof Symbol&&Symbol.for,u=a?Symbol.for("react.element"):60103,c=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,f=a?Symbol.for("react.strict_mode"):60108,d=a?Symbol.for("react.profiler"):60114,p=a?Symbol.for("react.provider"):60109,y=a?Symbol.for("react.context"):60110,h=a?Symbol.for("react.async_mode"):60111,v=a?Symbol.for("react.forward_ref"):60112;a&&Symbol.for("react.timeout");var m="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,r="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=0;n<t;n++)r+="&args[]="+encodeURIComponent(arguments[n+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",r)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function S(e,t,r){this.props=e,this.context=t,this.refs=i,this.updater=r||g}function _(){}function k(e,t,r){this.props=e,this.context=t,this.refs=i,this.updater=r||g}S.prototype.isReactComponent={},S.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},S.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=S.prototype;var w=k.prototype=new _;w.constructor=k,n(w,S.prototype),w.isPureReactComponent=!0;var O={current:null},x=Object.prototype.hasOwnProperty,j={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var n=void 0,o={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,n)&&!j.hasOwnProperty(n)&&(o[n]=t[n]);var a=arguments.length-2;if(1===a)o.children=r;else if(1<a){for(var c=Array(a),s=0;s<a;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(n in a=e.defaultProps)void 0===o[n]&&(o[n]=a[n]);return{$$typeof:u,type:e,key:i,ref:l,props:o,_owner:O.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var P=/\/+/g,T=[];function L(e,t,r,n){if(T.length){var o=T.pop();return o.result=e,o.keyPrefix=t,o.func=r,o.context=n,o.count=0,o}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>T.length&&T.push(e)}function R(e,t,r,n){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case c:i=!0}}if(i)return r(n,e,""===t?"."+$(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){var a=t+$(o=e[l],l);i+=R(o,a,r,n)}else if("function"==typeof(a=null===e||void 0===e?null:"function"==typeof(a=m&&e[m]||e["@@iterator"])?a:null))for(e=a.call(e),l=0;!(o=e.next()).done;)i+=R(o=o.value,a=t+$(o,l++),r,n);else"object"===o&&b("31","[object Object]"==(r=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":r,"");return i}function $(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function q(e,t,r){var n=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,n,r,l.thatReturnsArgument):null!=e&&(C(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+r,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),n.push(e))}function M(e,t,r,n,o){var i="";null!=r&&(i=(""+r).replace(P,"$&/")+"/"),t=L(t,i,n,o),null==e||R(e,"",q,t),A(t)}var V={Children:{map:function(e,t,r){if(null==e)return e;var n=[];return M(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;t=L(null,null,t,r),null==e||R(e,"",I,t),A(t)},count:function(e){return null==e?0:R(e,"",l.thatReturnsNull,null)},toArray:function(e){var t=[];return M(e,t,null,l.thatReturnsArgument),t},only:function(e){return C(e)||b("143"),e}},createRef:function(){return{current:null}},Component:S,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:y,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:v,render:e}},Fragment:s,StrictMode:f,unstable_AsyncMode:h,unstable_Profiler:d,createElement:E,cloneElement:function(e,t,r){(null===e||void 0===e)&&b("267",e);var o=void 0,i=n({},e.props),l=e.key,a=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(a=t.ref,c=O.current),void 0!==t.key&&(l=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)x.call(t,o)&&!j.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1==(o=arguments.length-2))i.children=r;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:u,type:e.type,key:l,ref:a,props:i,_owner:c}},createFactory:function(e){var t=E.bind(null,e);return t.type=e,t},isValidElement:C,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:O,assign:n}},N={default:V},U=N&&V||N;e.exports=U.default?U.default:U},6:function(e,t,r){"use strict";e.exports=r(5)},7:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e&&"object"==typeof e&&"default"in e?e.default:e}(r(6)),o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},l=function(e){function t(){return o(this,t),i(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return n.Children.only(this.props.children)},t}(n.Component);t.AppContainer=l,t.hot=function(){return function(e){return e}},t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){},t.cold=function(e){return e}},8:function(e,t,r){"use strict";e.exports=r(7)},9:function(e,t,r){r(8),r(0),e.exports=r(35)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,